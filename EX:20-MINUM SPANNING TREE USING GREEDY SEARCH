#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define MAX_VERTICES 100
#define INF INT_MAX
int graph[MAX_VERTICES][MAX_VERTICES];
int visited[MAX_VERTICES]; 
int distance[MAX_VERTICES]; 
int parent[MAX_VERTICES]; 
int n; 
int min_distance() {
  int min_vertex = -1;
  int min_distance = INF;
 for (int i = 0; i < n; i++) {
    if (!visited[i] && distance[i] < min_distance) {
      min_distance = distance[i];
      min_vertex = i;
    }
  }
  return min_vertex;
}
void prim() {
  for (int i = 0; i < n; i++) {
    distance[i] = INF;
    visited[i] = 0;
  }
  distance[0] = 0;
  parent[0] = -1;
 for (int i = 0; i < n - 1; i++) {
    int min_vertex = min_distance();
    visited[min_vertex] = 1;
for (int j = 0; j < n; j++) {
      if (graph[min_vertex][j] && !visited[j] && graph[min_vertex][j] < distance[j]) {
        distance[j] = graph[min_vertex][j];
        parent[j] = min_vertex;
      }
    }
  }
}

void print_mst() {
  printf("Edge \tWeight\n");
  for (int i = 1; i < n; i++)
    printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
}
int main() {
  printf("Enter the number of vertices: ");
  scanf("%d", &n);
printf("Enter the adjacency matrix:\n");
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      scanf("%d", &graph[i][j]);
    }
  }
prim();
printf("The minimum spanning tree is:\n");
  print_mst();
return 0;
}
